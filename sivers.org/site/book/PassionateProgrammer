<!DOCTYPE html>
<html lang="en" dir="ltr">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>The Passionate Programmer - by Chad Fowler | Derek Sivers</title>
<meta name="description" content="Derek Sivers: Wonderful book about the art, craft, and passion of being a great computer programmer. Loved the analogies to being a musician: sight-reading, being the worst member of the band, understanding new styles of music, practicing just for improvement, etc.">
<link rel="alternate" type="application/atom+xml" title="Derek Sivers" href="/en.atom">
<style>
body{max-width:40em;margin:0 auto;padding:5px;font-family:sans-serif;font-size:17px;line-height:24px;color:#000}h1,h2,h3,h4,article p,article li{font-family:Georgia, serif}article p,article li{font-size:20px;line-height:30px}a{text-decoration:none;color:#20b}a:visited{color:#606}a:hover{text-decoration:underline}h1,h2,h3,h4,h5,small,.small,p.postdate,footer,input[type="submit"],label,dl#tweetlist dt{line-height:1em}small,.small{font-size:0.8em;font-weight:normal}.spacer{clear:both}input[type="text"],input[type="password"],input[type="email"],select,textarea{padding:0.5em 0.6em;display:block;border:1px solid #ccc;box-shadow:inset 0 1px 3px #ddd;border-radius:4px;vertical-align:middle;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type="text"]:focus,input[type="password"]:focus,input[type="email"]:focus,select,textarea{outline:0;border-color:#129FEA}input[type="submit"]{padding:5px;font-size:1em;background:#800;color:#fff;font-weight:bold}form.inlineform input{display:inline}select{height:2.25em;border:1px solid #ccc;background-color:#fff}label{margin:0.5em 0 0.2em}@media screen and (max-width: 400px){section#masthead h1{font-size:2em}}@media screen and (min-width: 400px){section#masthead h1{font-size:3em}}section#masthead h1{margin:0}section#masthead h1 a{text-decoration:none;color:#800}section#masthead h1 a img{margin-right:5px}section#masthead small{display:block;line-height:1em}div#content h1{font-size:2em}div#content h1,div#content h2,div#content h3,div#content cite{color:#800}div#content li,div#content dd{margin-bottom:1em}div#content pre{color:#fff;background-color:#333;padding:0.25em;line-height:1}div#content code{font-size:0.8em}div#content article img{max-width:100%;height:auto;display:block}section{margin-bottom:4em}section#masthead{margin-bottom:1em}body#home div#content h2 small{font-size:70%;font-weight:normal;margin-left:2em}body#home div#content ul{padding-left:0}body#home div#content ul li{list-style-type:none}div.blogparent{font-size:1.2em;font-weight:bold;margin:1em 0 -0.5em 0}body#oneblog div#content article header h1 a{text-decoration:none}body#oneblog div#content article header p{margin-top:-1em}body#oneblog div#content article h2,body#oneblog div#content article h3{margin-top:2em}div#comments ol{padding-left:1em}div#comments li{margin-bottom:2em}div#comments span.response{display:block;margin-left:1em;padding:4px;background-color:#ffc;border:1px solid #000;font-family:sans-serif;font-size:14px}body#booklist figure img,body#onebook figure img{float:left;margin-right:2em}body#booklist figure{margin:0 0 8em 0}body#onebook figure{margin:0}body#interview blockquote{margin:0}body#home dt,body#code dt,body#music dt{font-weight:bold}dl#tweetlist dt{font-weight:normal}div.presentation_summary{margin-bottom:6em}@media screen and (max-width: 400px){div.presentation_summary img{display:block}}@media screen and (min-width: 400px){div.presentation_summary img{float:right}}p.postdate,footer,dl#tweetlist dt{font-size:80%;color:#666}
</style>
<meta property="og:title" content="The Passionate Programmer - by Chad Fowler | Derek Sivers">
<meta property="og:type" content="article">
<meta property="og:url" content="https://sivers.org/book/PassionateProgrammer">
<meta property="og:image" content="https://sivers.org/images/PassionateProgrammer.gif">
<meta property="og:description" content="Wonderful book about the art, craft, and passion of being a great computer programmer. Loved the analogies to being a musician: sight-reading, being the worst member of the band, understanding new styles of music, practicing just for improvement, etc.">
<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@sivers">
<meta name="twitter:creator" content="@sivers">
<meta name="twitter:title" content="The Passionate Programmer - by Chad Fowler | Derek Sivers">
<meta name="twitter:description" content="Wonderful book about the art, craft, and passion of being a great computer programmer. Loved the analogies to being a musician: sight-reading, being the worst member of the band, understanding new styles of music, practicing just for improvement, etc.">
<meta name="twitter:image" content="https://sivers.org/images/PassionateProgrammer.gif">
</head>
<body id="onebook">
<section id="masthead">
<h1><a href="/" title="Derek Sivers"><img src="/images/DerekSivers-50x50.jpg">Derek Sivers</a></h1>
<small>Programmer, writer, avid student of life. I make useful things, and share what I learn.</small>
</section>
<div id="content">

<header>
<figure><a href="http://www.amazon.com/dp/1934356344?tag=sivers-20"><img src="/images/PassionateProgrammer.gif" alt="The Passionate Programmer - by Chad Fowler"></a></figure>
<h1>The Passionate Programmer - by Chad Fowler</h1>
<p class="postdate">
ISBN: 1934356344, 
READ: 2012-01-15, 
RATING: 7/10
<br>(See <a href="/book">my list of 200+ books</a>, for more.)
</p>
<p><strong>Go to the <a href="http://www.amazon.com/dp/1934356344?tag=sivers-20">Amazon page</a></strong> for details and reviews.</p>
</header>

<p id="booksummary">Wonderful book about the art, craft, and passion of being a great computer programmer. Loved the analogies to being a musician: sight-reading, being the worst member of the band, understanding new styles of music, practicing just for improvement, etc.</p>
<h2>my notes</h2>
<p id="booknotes">
The stuff you read in this book?  Act on It!<br>
<br>
Always try to be the worst musician in the band.<br>
Find a “be the worst” situation for yourself.<br>
<br>
The addition of Smalltalk to the requirements list yielded a candidate pool that was tiny in contrast to our previous list. These people were diamonds in the rough.  They loved to program!<br>
<br>
People say, “I haven’t been given the opportunity to work on that”<br>
Given the opportunity? Neither was I! I took the opportunity to learn.<br>
<br>
Ask old-timers to review your code and make suggestions that would make it more idiomatically correct.<br>
<br>
Try a small project, twice. Try it once in your home base technology and then once, as idiomatically as possible, in a competing technology.<br>
<br>
Programming: I was addicted, but in a good way. My drive to create had been ignited in much the same way that it had when I started writing classical music or playing improvisational jazz. I was obsessed with learning anything and everything I could. I wasn’t in this for a new career. In fact, many of my musician friends thought of it as an irresponsible distraction from my actual career. I was in it because I couldn’t not be.<br>
<br>
This was the difference between me and my overeducated, underperforming colleagues at work. Passion.<br>
<br>
The greats in various fields, this same pattern of addictive, passionate behavior surfaces. Jazz saxophone great John Coltrane reportedly practiced so much that his lips would bleed.<br>
<br>
Letting the (automated) wizards have their way leaves your knowledge shallow and leaves you limited to what the wizards can already do for you.<br>
<br>
One body of knowledge is neither technical nor domain-specific and won’t be outdated at any time soon: the basics of business finance.<br>
<br>
A mentor is someone you can trust enough to ask, “What should be different about me as a professional?”<br>
<br>
Not only do you create a personal attachment and responsibility to your mentor, but the reverse happens as well. If my role in a relationship is to help someone, I become invested in that person’s success.<br>
<br>
Nobody has to explicitly ask someone to be their mentor.<br>
<br>
Your mentor may not even know they are serving that role for you.<br>
<br>
Think of the person in your field whom you admire most.<br>
List the ten most important attributes of this role model.<br>
Choose the attributes that are the reason why you have chosen this person to be your role model.<br>
Rank those qualities in order of importance.<br>
You have now created and distilled a list of attributes that you find admirable and important.<br>
These are the ways in which you should strive to emulate your chosen role model.<br>
<br>
For each item on the list, imagine how your role model would rate you on a scale of 1 to 10<br>
Subtract your rating in each row from the importance level you gave it.<br>
That gives you a final priority score<br>
<br>
Martin Fowler said that whenever he wants to really learn about something, he writes about it.<br>
<br>
To really learn something, try teaching it to someone else. There’s no better way to crystallize your understanding of something than to force yourself to express it to someone else so that they can understand it.<br>
<br>
We internally work through the reasons why one analogy seems to work but doesn’t and another analogy would seem not to work but does. When you teach, you have to answer questions that may have never occurred to you.<br>
<br>
Helping someone is a job you can’t be laid off from.<br>
<br>
When you practice music, it shouldn’t sound good. If you always sound good during practice sessions, it means you’re not stretching your limits. That’s what practice is for.<br>
<br>
Can you imagine a professional musician getting onstage and replicating the gibberish from my university’s practice rooms? It wouldn’t be tolerated. Musicians are paid to perform in public - not to practice.<br>
<br>
I started experimenting with programming exercises modeled after my musical practice sessions.<br>
Rule number one was that the software I was developing couldn’t be something I wanted to use.<br>
I didn’t want to cut corners, rushing to an end goal.<br>
So, I wrote software that wasn’t useful.<br>
I cut no corners but was frustrated to find that a lot of the ideas I had while practicing weren’t working.<br>
Though I was trying to do as good a job as possible, the designs and code I was creating weren’t as elegant as I had hoped they’d be.<br>
Looking back on it now, I see that the awkward feeling I got from these experiences was a good sign.<br>
My code wasn’t completely devoid of brilliant moments. But I was stretching my mental muscles and building my coding chops.<br>
<br>
Practice at your limits.<br>
<br>
Are there dusty corners of your primary programming language that you rarely visit?<br>
- Regular expressions are extremely powerful and tragically underutilized.<br>
- Multithreaded programming<br>
- stream libraries<br>
- network programming APIs<br>
- utilities available for dealing with collections or lists?<br>
<br>
Got any favorite pieces of open source software? How about trying to add a feature?<br>
Go look at the to-do list for a piece of software you’d like to practice with, and give yourself a constrained amount of time to implement the new feature.<br>
<br>
Sight reading:<br>
download the source code for the software, and start exploring.<br>
How do you know where to look?<br>
What tricks do you use to find your way around a significant body of code?<br>
<br>
This is an exercise you can practice often and in short periods of time. You don’t actually have to implement the feature. Just use it as a starting point. The real goal is to understand what you’re looking at as quickly as possible. Be sure to vary the software you work with. Try different types of software in different styles and languages. Take note of issues that make it easier or harder for you to find your way around.<br>
What patterns are you developing that help you work through the code?<br>
What virtual bread crumbs do you leave for yourself to help you navigate as you move up and down the call stack of a complex piece of functionality?<br>
<br>
A great way to sharpen the mind and improve your improvisational coding skills is to practice with self-imposed constraints.<br>
Pick a simple program, and try to write it with these constraints.<br>
My favorite exercise is to write a program that prints the lyrics to the tired old song “99 Bottles of Beer on the Wall.“<br>
How could you write such a program without doing any variable assignments?<br>
<br>
How fast can you code this program?<br>
How about practicing small, difficult problems with a timer?<br>
<br>
TopCoder - TopCoder.com offers a practice room with a large collection of practice problems<br>
<br>
Code Kata, which are small, thought-provoking exercises that programmers can do in the language of their choice. Each kata emphasizes a specific technique or thought process, providing a concrete flexing of one’s mental muscles.  Work through all twenty-one kata.<br>
<br>
Listening to music, therefore, is not a passive activity for a jazz musician. It is study. Furthermore, the ability to understand what you’re hearing is a skill that you develop over time.<br>
<br>
Studying the work of masters is an essential part of becoming a master.<br>
<br>
How do others strategically use variable, function, and structure naming?<br>
<br>
There is no hidden source code for a painting or a piece of music. If you can hear the music or see the piece of art, you can learn from it.<br>
<br>
As you look at this code with a critical eye, you will start to develop your own tastes, just as you would for music, art, or literature. Various styles and devices will amuse you, amaze you, anger you, and (I hope) challenge you.<br>
<br>
You will learn more about what already exists.<br>
<br>
Pick a project, and read it like a book.<br>
Make notes. Outline the good and the bad.<br>
Write a critique, and publish it.<br>
Find at least one trick or pattern that you can use from it.<br>
Find at least one bad thing that you observed that you will add to your “What not to do” checklist.<br>
<br>
“Work expands so as to fill the time available for its completion.”<br>
<br>
The sad thing is that even when you don’t want it to be this way, you can fall into the trap, especially when there are tasks you don’t really want to do.<br>
In the case of a weekend coding race, you don’t have time to put tasks off, so you don’t.<br>
You can’t delay making a decision, so you don’t.<br>
You can’t avoid the boring work, and you know that you have to do it so quickly that nothing can get too boring.<br>
<br>
A sense of urgency, even if manufactured, is enough to easily double or triple your productivity. Try it, and you’ll see. You can do it faster. You can do it now. You can get it done instead of talking about getting it done. If you treat your projects like a race, you’ll get to the end a lot faster.<br>
<br>
He had this uncanny ability to predict what you were going to ask him to do and do it before you thought of it. It was like magic.  He was only doing things that I had already said I wanted. I had just said them in ways that were subtle enough that even I didn’t realize I had said them.<br>
<br>
Mind reading not only applies to your managers but also to your customers. If they’re giving you the right cues, you might be able to add features that they’re either going to ask for or would have asked for if they had realized they were possible.<br>
<br>
Start making some notes about what you think your users and managers are going to ask for. Be creative. Try to see the system from their points of view.<br>
<br>
Keeping your mind focused on the present will get you further toward your goals than keeping your mind focused on the goal.<br>
<br>
If you’re always walking around with your head in the clouds, You’ll always be waiting for the big one while ignoring the little things that happen every day.<br>
<br>
What if you tried to do the boring stuff perfectly?<br>
<br>
The more successful you are, the more likely you are to make a fatal mistake. When you’ve got everything going for you, you’re less likely to question your own judgment. When the way you’ve always done it has always worked, you’re less likely to recognize a new way that might work better.<br>
<br>
Software developers are typically creative, freedom-loving people.<br>
<br>
Martin renamed forty-hour workweek to “eight-hour burn.” The idea is that you should work so relentlessly that there is no way that you could continue longer than eight hours.  When you have too much time to work, your work time reduces significantly in perceived value. If you have seventy hours available, each hour is less precious to you than when you have forty hours available.  Eight-hour burn places a constraint on you and gives you a strategy for dealing with that constraint. You get to work and think, I’ve only got eight hours! Go, go, go!<br>
<br>
If you work intensely every day, you’ll find that the work doesn’t follow you home. Not only are you deliberately stopping yourself from working after-hours, but your mind will actually allow you to stop working after-hours.<br>
<br>
Every wrong note is at most one step away from a right one. What makes improvisations bad is when the improviser doesn’t know what to do when the wrong note pops out.<br>
<br>
“I don’t know” is not a phrase for the insecure.<br>
<br>
Heroes never panic.<br>
<br>
Chris would actually plan down to how he was going to use the fifteen minutes between classes to fit in practice routines that could be done quickly.<br>
<br>
You should read good code.<br>
<br>
You have to actively copy, widely and unashamedly. This applies to a lot of things, of course. Hunter S. Thompson didn’t just read good books; he typed out Hemingway and Fitzgerald.<br>
<br>
Copying builds muscle memory. You get a feel for the nuance and form of the original - the kind of detail that’s lost in a quick scan.<br>
<br>
Don’t let yourself just be the best in the bunch. Be the person and do the things that people can’t not talk about.<br>
<br>
He was just a high-school kid. But, he was already playing gigs, substituting for Little Rock’s most respected jazz pianists. Chris was pretty good - especially for his age - but he wasn’t that good.  It didn’t take me long to understand what was happening.  When the band we were watching took a set break, Chris would break mid-sentence and just walk away from me to go talk to the band members.  He was pushy as hell and would always ask if he could sit in with the band, no matter how inappropriate it seemed to me. He would also ask the musicians for lessons, which meant that he would go to their houses, listen to music, and chat about jazz improvisation with them.<br>
<br>
I’ve seen the same pattern in people I’ve met in classical music, the American Tibetan Buddhist community, software development.<br>
<br>
Really good people won’t mind if you want to know them. People like to be appreciated, and they like to talk about the topics they are passionate about. The fact that they are the professional or the guru or the leader or the renowned author doesn’t change that they’re human and like to interact with other humans.<br>
<br>
The gurus are the supernodes in the social and professional network. All it takes to make the connection is a little less humility.<br>
<br>
Carve out weekly time to investigate the bleeding edge.<br>
<br>
Research new technologies and to start to develop skills in them. Do hands-on work with these new technologies.<br>
<br>
Watch the alpha geeks.<br>
<br>
Rigid values make you fragile.<br>
<br>
The big problems I have successfully solved in my life. The secret is to focus on making whatever it is you’re trying to improve better today than it was yesterday. That’s it. It’s easy.<br>
</p>


</div>
</body>
</html>
